shader ArrayTest {
    struct VertexInput {
        vec3 position;
        vec2 texCoord;
    }
    
    struct VertexOutput {
        vec2 uv;
        vec4 position;
    }
    
    struct FragmentInput {
        vec2 uv;
    }
    
    struct FragmentOutput {
        vec4 color;
    }

    // Test array in uniform buffer
    cbuffer TestBuffer {
        float values[4];
        vec3 colors[2];
    };
    
    vertex {
        VertexOutput main(VertexInput input) {
            VertexOutput output;
            output.uv = input.texCoord;
            
            // Use array access
            float scale = values[0] + values[1];
            
            // Array access in expressions
            vec3 position = input.position * scale;
            
            output.position = vec4(position, 1.0);
            return output;
        }
    }

    fragment {
        FragmentOutput main(FragmentInput input) {
            FragmentOutput output;
            
            // Test array access in fragment shader
            vec3 color = colors[0];
            if (input.uv.x > 0.5) {
                color = colors[1];
            }
            
            output.color = vec4(color, 1.0);
            return output;
        }
    }
} 